name: C/C++ CI

on: [pull_request, push]
defaults:
  run:
    shell: bash
jobs:
  build:
    strategy:
        matrix:
          os: [windows-latest]
          build_type: [full]
    runs-on: ${{matrix.os}}
    env:
      AUTOBUILD_VSVER: 120
      PreferredToolArchitecture: x64
      PlatformToolset: v120
      NINJA_FLAGS: -j4
      VIEWER_CHANNEL: FirestormVR-GUI
      VIEWER_VERSION_REVISION: 58205
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        clean: false
    - name: Set VIEWER_VERSION_GITHASH
      shell: bash
      run: |
        majorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 1`
        minorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 2`
        patchVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 3`
        echo ::set-env name=VIEWER_VERSION_STR::${majorVer}.${minorVer}.${patchVer}.${VIEWER_VERSION_REVISION}
        git log -n 1
        git log -n 1 | grep "Merge " | awk '{ print $2 }' || true
        echo ::set-env name=VIEWER_VERSION_GITHASH::$(git log -n 1 | grep "Merge " | awk '{ print $2 }' | xargs git rev-parse --short || git rev-parse --short HEAD)
    - name: Set env
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        echo ::set-env name=AUTOBUILD_ID::-
        echo ::set-env name=AUTOBUILD_INSTALLABLE_CACHE::%cd%\autobuild-cache
        echo ::set-env name=AUTOBUILD_VARIABLES_FILE::%cd%\fs-build-variables\variables
        echo ::set-env name=NINJA_FLAGS::${{ env.NINJA_FLAGS }} -C build-vc${{ env.AUTOBUILD_VSVER }}-64

    - name: Set env apt
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get install -y -qq libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxinerama-dev libxrender-dev gdb
        echo ::set-env name=AUTOBUILD_VARIABLES_FILE::$PWD/fs-build-variables/variables
        echo ::set-env name=LIBRARY_PATH::$PWD/openvr/lib/linux64

    - uses: seanmiddleditch/gha-setup-vsdevenv@master

    - name: cache -- VS2013 Community
      if: startsWith(matrix.os, 'windows')
      id: cachedvs2013
      uses: actions/cache@v2
      with:
        path: |
           c:/vs2013
           c:/Program Files (x86)/MSBuild/Microsoft.Cpp/v4.0/V120
           c:/Program Files (x86)/MSBuild/12.0
        key: ${{ runner.os }}-vs2013-msbuildstuff

    - name: check disk space
      run: df -h

    - name: VS2013 Community if cached
      if: startsWith(matrix.os, 'windows') && steps.cachedvs2013.outputs.cache-hit == 'true'
      shell: cmd
      run: |
        reg add HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7 -v 12.0 -d c:\vs2013\
        reg add HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VC7 -v 12.0 -d c:\vs2013\VC\
        call "c:\vs2013\VC\vcvarsall.bat" amd64
        cl.exe
        which msbuild.exe
        msbuild.exe -version

    - name: allprogs.txt
      if: startsWith(matrix.os, 'windows') && steps.cachedvs2013.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        dir "c:/Program Files/" >> allprogs.txt
        dir "c:/Program Files (x86)/" >> allprogs.txt
        dir "c:/ProgramData/" >> allprogs.txt

    - name: Download VS2013 Community
      if: startsWith(matrix.os, 'windows') && steps.cachedvs2013.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        mkdir c:\vs2013
        dir
        choco install visualstudiocommunity2013 -ia "/CustomInstallPath ""c:\vs2013""" || type C:\Users\runneradmin\AppData\Local\Temp\chocolatey\vs.log
        dir c:\vs2013
        call "c:\vs2013\VC\vcvarsall.bat" amd64
        set
        cl.exe

    - name: allprogs.txt 2
      if: startsWith(matrix.os, 'windows') && steps.cachedvs2013.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        dir "c:/Program Files/" >> allprogs2.txt
        dir "c:/Program Files (x86)/" >> allprogs2.txt
        dir "c:/ProgramData/" >> allprogs2.txt
        diff allprogs.txt allprogs2.txt || true

    - name: check disk space
      run: df -h

    - name: Setup Ninja
      if: startsWith(matrix.os, 'ubuntu')
      uses: seanmiddleditch/gha-setup-ninja@master
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64
    - name: Get software versions please
      shell: cmd
      run: |
        call "c:\vs2013\VC\vcvarsall.bat" amd64
        cmake --version
        git --version
        python --version
        cl.exe
    - name: Install autobuild through PIP
      run: pip install git+https://vcs.firestormviewer.org/autobuild-1.1#egg=autobuild
    - name: Get autobuild version
      run: autobuild --version
 
    - name: cache -- autobuild downloaded installables
      id: cacheddownloads
      uses: actions/cache@v2
      with:
        path: autobuild-cache
        key: ${{ runner.os }}-cacheddownloads-${{ hashFiles('autobuild.xml') }}-${{ env.VIEWER_CHANNEL }}


    - name: Configure autobuild
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "c:\vs2013\VC\vcvarsall.bat" amd64
        autobuild configure -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE -DVS_DISABLE_FATAL_WARNINGS=ON
    - name: Configure autobuild
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild configure -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE --ninja
    - name: Build & Package
      if: false && startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "c:\vs2013\VC\vcvarsall.bat" amd64
        #autobuild build -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE --ninja
        msbuild build-vc120-64/Firestorm.sln /target:llpackage /property:Configuration=Release;Platform=x64 /maxcpucount /detailedsummary
    - name: Build & Package
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild build -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE --ninja
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: ${{matrix.os}}-${{env.VIEWER_CHANNEL}}-${{env.VIEWER_VERSION_STR}}-${{env.VIEWER_VERSION_GITHASH}}
        path: build-vc120-64/newview/Release/*_Setup.exe
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu')
      with:
        name: ${{matrix.os}}-${{env.VIEWER_CHANNEL}}-${{env.VIEWER_VERSION_STR}}-${{env.VIEWER_VERSION_GITHASH}}
        path: build-linux-x86_64/newview/Phoenix*.tar.*
