name: C/C++ CI

on: [push]
defaults:
  run:
    shell: bash
jobs:
  build:
    strategy:
        matrix:
          os: [windows-latest]
          build_type: [full]
    runs-on: ${{matrix.os}}
    env:
      AUTOBUILD_VSVER: 120
      PreferredToolArchitecture: x64
      VIEWER_CHANNEL: FirestormVR-GUI
      VIEWER_VERSION_REVISION: 58205
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        clean: false
    - name: Set VIEWER_VERSION_GITHASH
      shell: bash
      run: |
        majorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 1`
        minorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 2`
        patchVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 3`
        echo ::set-env name=VIEWER_VERSION_STR::${majorVer}.${minorVer}.${patchVer}.${VIEWER_VERSION_REVISION}
        echo ::set-env name=VIEWER_VERSION_GITHASH::$(git log -n 1 | grep "Merge " | awk '{ print $2 }' | xargs git rev-parse --short || git rev-parse --short HEAD)
    - name: Set env
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        echo ::set-env name=AUTOBUILD_ID::-
        echo ::set-env name=AUTOBUILD_VARIABLES_FILE::%cd%\fs-build-variables\variables
    - name: Set env apt
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get install -y -qq libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxinerama-dev libxrender-dev gdb
        echo ::set-env name=AUTOBUILD_VARIABLES_FILE::$PWD/fs-build-variables/variables
        echo ::set-env name=LIBRARY_PATH::$PWD/openvr/lib/linux64
    - name: download VS2013 Express
      if: startsWith(matrix.os, 'windows')
      shell: powershell
      run: |
        mkdir c:\vs2013
        wget -O c:\vs2013\wdexpress_full.exe http://download.microsoft.com/download/2/5/5/255DCCB6-F364-4ED8-9758-EF0734CA86B8/wdexpress_full.exe
    - name: install VS2013 Express
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        echo on
        dir wdexpress_full.exe
        c:\vs2013\wdexpress_full.exe /silent /passive /norestart /custominstallpath "c:\vs2013"
        call "c:\vs2013\VC\vcvarsall.bat" x86_amd64
        cl.exe
        msbuild.exe -version

    - name: Setup Ninja
      if: startsWith(matrix.os, 'ubuntu')
      uses: seanmiddleditch/gha-setup-ninja@master
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64
    - name: Get software versions please
      run: |
        cmake --version
        git --version
        python --version
    - name: Install autobuild through PIP
      run: pip install git+https://vcs.firestormviewer.org/autobuild-1.1#egg=autobuild
    - name: Get autobuild version
      run: autobuild --version
    - name: Configure autobuild
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "c:\vs2013\VC\vcvarsall.bat" x86_amd64
        autobuild configure -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE -DVS_DISABLE_FATAL_WARNINGS=ON
    - name: Configure autobuild
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild configure -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE --ninja
    - name: Build & Package
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "c:\vs2013\VC\vcvarsall.bat" x86_amd64
        msbuild build-vc120-64/Firestorm.sln /target:llpackage /property:Configuration=Release;Platform=x64 /maxcpucount /detailedsummary
    - name: Build & Package
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild build -A 64 -c ReleaseFS_open -- --package --openal --chan ${{env.VIEWER_CHANNEL}} -DLL_TESTS:BOOL=FALSE --ninja
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: ${{matrix.os}}-${{env.VIEWER_CHANNEL}}-${{env.VIEWER_VERSION}}-${{env.VIEWER_VERSION_GITHASH}}
        path: build-vc120-64/newview/Release/*_Setup.exe
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu')
      with:
        name: ${{matrix.os}}-${{env.VIEWER_CHANNEL}}-${{env.VIEWER_VERSION}}-${{env.VIEWER_VERSION_GITHASH}}
        path: build-linux-x86_64/newview/Phoenix*.tar.*
